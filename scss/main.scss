/* partials allow sass to be broken up into major componants which can be called/imported */
@import './resets';
@import './variables';

@function weight($weight-name){
    @return map-get($font-weights, $weight-name);
}

/* functions and mixins are simular but functions you input values and return values */
/* mixins should define styles (ex: light and dark themes) */

@mixin flexCenter($direction){
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
}
@mixin theme($light-theme: true){
    @if $light-theme{
        background: lighten($primary-color, 100%);
        color: darken($text-color, 100%);
    }
}
@mixin mobile {
    @media (max-width: $mobile){
        @content;
    }
}
body{
    background: $primary-color;
    color: $text-color;
    /* map-get then select the map then select the option within the map */
    font-weight: map-get($font-weights, bold);
}

    /* nesting allows the developer not to retype the parent each and every time */
.main{
    @include flexCenter(column);
    width: 80%-40%; /* sass operations need to be the same units while css calc can do mix units */
    margin: 0 auto;

    /* & calls the parent tag */
    /* to include the partent and more specified child we have to use interpolation */
    #{&}_paragraph1{
        font-weight: weight(bold);

        &:hover{
            color: pink;
        }
    }
    /* extend copies the styling and nesting and puts the styling in the new class tag */
    #{&}_paragraph2{
        @extend .main_paragraph1;

        &:hover{
            color: $accent-color;
        }
    }
}

@include mobile{
    flex-direction: column;
}

/* if true will include in css if false it will not include the mixin */
.light{
    @include theme($light-theme: false);
}